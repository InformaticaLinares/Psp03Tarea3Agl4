/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package t03tarea3chat;

import java.awt.Color;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;

/**
 *
 * @author pedro
 */
public class ServidorChat extends javax.swing.JFrame {
       static ServerSocket servidor;
        Socket cliente;
        HiloDelServidor hilo; 
        static int NumConexiones = 0;
        static int NumActuales = 0;
        static final int MAX = 10;
        static ArrayList<Socket> almacenSockets = new ArrayList<>(); 
       

    public JTextArea getjTextArea1() {
        return jTextArea1;
    }

    public void setjTextArea1(JTextArea jTextArea1) {
        this.jTextArea1 = jTextArea1;
    }
       
    /**
     * Creates new form ServidorChat
     */
    public ServidorChat() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblConexiones = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 255));
        getContentPane().setLayout(null);

        lblConexiones.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblConexiones.setText("Número de conexiones activas: 0");
        getContentPane().add(lblConexiones);
        lblConexiones.setBounds(51, 33, 181, 15);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(51, 59, 535, 333);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(503, 30, 80, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
//       int contador=1;
//        ServidorChat servidorchat=new ServidorChat();
//        servidorchat.setVisible(true);
//        ServerSocket servidor = new ServerSocket(55000);
//        Socket cliente;
//      //  servidorchat.jTextArea1.addend("Servidor preparado para trabajar");
//        servidorchat.jTextArea1.append("Servidor preparado para trabajar");
//        System.out.println ("Servidor preparado para trabajar");
//        while (true){ //bucle infinito
//            cliente = servidor.accept();
//            servidorchat.jTextArea1.setText(servidorchat.jTextArea1.getText()+" \nCliente conectado nº "+contador);
//            lblConexiones.setText("Numero de conexiones activas: "+contador);
//            contador ++;
//            HiloDelServidor hilo = new HiloDelServidor (cliente);
//            hilo.start();
//        }
ServidorChat server = new ServidorChat(); //pantalla del servidor
        verServidor(server);  //hago visible la ventana en una posición dada
        ejecutaServidor();  //servidor comienza su trabajo
    }
 private static void verServidor(ServidorChat server) {
        server.setBounds(0, 0, 700, 500);
        server.setVisible(true);
        //inicializo el número de conexiones a 0
        lblConexiones.setText("Número de conexiones activas: " + 0);
    }
 private static void ejecutaServidor() {

        try {
            servidor = new ServerSocket(55000);
            System.out.println("Servidor en marcha");
        } catch (IOException ex) {
            Logger.getLogger(ServidorChat.class.getName()).log(Level.SEVERE, null, ex);
        }
        //servidor en ejecución permanente mientras no pulse boton salir
        while (true) {            
            //el servidor espera conexion cliente y crea socket cuando se conecta
            Socket socket = new Socket();
            try {
                socket = servidor.accept();//acepto conexion
            } catch (SocketException ex) {
                break; // salgo bucle
            } catch (IOException ex) {
                Logger.getLogger(ServidorChat.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (NumConexiones < MAX){//si no llego al maximo de conexiones permitidas                
                NumConexiones++; //aumento el contador de número de conexiones 
                almacenSockets.add(socket); //alamacenamos el socket en el ArrayList                
            }            
            //lanzo el hilo que gestiona los mensajes del cliente que se ha conectado
            HiloDelServidor hilo = new HiloDelServidor(socket);
            hilo.start();                 
            
        }
        //compruebo servidor cerrado, si no fue cerrado primero
        if (!servidor.isClosed()) {
            lblConexiones.setForeground(Color.red);
            lblConexiones.setText("Nº conexiones establecidas: " + NumConexiones);
            try {
                servidor.close();
            } catch (IOException ex) {
                Logger.getLogger(ServidorChat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JLabel lblConexiones;
    // End of variables declaration//GEN-END:variables
}
